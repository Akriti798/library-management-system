main code 
#include <iostream>
#include <string>
#include <unordered_map>
#include <list>
#include <queue>

using namespace std;

// Structure for Book
struct Book {
    string id;
    string title;
    string author;

    Book(string bid, string btitle, string bauthor)
        : id(bid), title(btitle), author(bauthor) {}
};

// Node for Binary Search Tree
struct TreeNode {
    Book book;
    TreeNode* left;
    TreeNode* right;

    TreeNode(Book b) : book(b), left(nullptr), right(nullptr) {}
};

// Class for Library Management System
class Library {
private:
    TreeNode* root; // Root for Binary Search Tree
    unordered_map<string, list<string>> userTransactions; // User tracking
    list<string> transactionHistory; // Global transaction log

    // Insert a book in the BST
    TreeNode* insert(TreeNode* node, Book book) {
        if (!node) return new TreeNode(book);
        if (book.title < node->book.title)
            node->left = insert(node->left, book);
        else
            node->right = insert(node->right, book);
        return node;
    }

    // Search a book in the BST
    TreeNode* search(TreeNode* node, string title) {
        if (!node || node->book.title == title)
            return node;
        if (title < node->book.title)
            return search(node->left, title);
        return search(node->right, title);
    }

    // Inorder traversal for displaying books
    void displayBooks(TreeNode* node) {
        if (!node) return;
        displayBooks(node->left);
        cout << "ID: " << node->book.id
             << ", Title: " << node->book.title
             << ", Author: " << node->book.author << endl;
        displayBooks(node->right);
    }

public:
    Library() : root(nullptr) {}

    // Add a book to the library
    void addBook(string id, string title, string author) {
        Book book(id, title, author);
        root = insert(root, book);
        cout << "Book \"" << title << "\" added successfully!" << endl;
    }

    // Search for a book
    void searchBook(string title) {
        TreeNode* result = search(root, title);
        if (result) {
            cout << "Book Found - ID: " << result->book.id
                 << ", Title: " << result->book.title
                 << ", Author: " << result->book.author << endl;
        } else {
            cout << "Book not found!" << endl;
        }
    }

    // Track user transactions
    void issueBook(string userId, string bookTitle) {
        TreeNode* result = search(root, bookTitle);
        if (result) {
            userTransactions[userId].push_back(bookTitle);
            transactionHistory.push_back("Issued: " + bookTitle + " to User " + userId);
            cout << "Book \"" << bookTitle << "\" issued to User " << userId << "." << endl;
        } else {
            cout << "Book not available!" << endl;
        }
    }

    // Return a book
    void returnBook(string userId, string bookTitle) {
        auto& userBooks = userTransactions[userId];
        userBooks.remove(bookTitle);
        transactionHistory.push_back("Returned: " + bookTitle + " by User " + userId);
        cout << "Book \"" << bookTitle << "\" returned by User " << userId << "." << endl;
    }

    // Display all books
    void displayAllBooks() {
        cout << "\nAvailable Books:\n";
        displayBooks(root);
    }

    // Display transaction history
    void displayTransactionHistory() {
        cout << "\nTransaction History:\n";
        for (const auto& transaction : transactionHistory)
            cout << transaction << endl;
    }
};

int main() {
    Library library;

    library.addBook("B001", "The Great Gatsby", "F. Scott Fitzgerald");
    library.addBook("B002", "1984", "George Orwell");
    library.addBook("B003", "To Kill a Mockingbird", "Harper Lee");

    library.displayAllBooks();

    library.searchBook("1984");

    library.issueBook("U101", "1984");
    library.returnBook("U101", "1984");

    library.displayTransactionHistory();

    return 0;
}
